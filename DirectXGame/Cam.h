#pragma once

#include "ViewProjection.h"
#include "WorldTransform.h"

#include <cassert>

//Matrix4x4 Inverse(const Matrix4x4& m) {
//	Matrix4x4 result;
//	float determinant = m.m[0][0] * m.m[1][1] * m.m[2][2] * m.m[3][3] +
//	                    m.m[0][0] * m.m[1][2] * m.m[2][3] * m.m[3][1] +
//	                    m.m[0][0] * m.m[1][3] * m.m[2][1] * m.m[3][2] -
//	                    m.m[0][0] * m.m[1][3] * m.m[2][2] * m.m[3][1] -
//	                    m.m[0][0] * m.m[1][2] * m.m[2][1] * m.m[3][3] -
//	                    m.m[0][0] * m.m[1][1] * m.m[2][3] * m.m[3][2] -
//	                    m.m[0][1] * m.m[1][0] * m.m[2][2] * m.m[3][3] -
//	                    m.m[0][2] * m.m[1][0] * m.m[2][3] * m.m[3][1] -
//	                    m.m[0][3] * m.m[1][0] * m.m[2][1] * m.m[3][2] +
//	                    m.m[0][3] * m.m[1][0] * m.m[2][2] * m.m[3][1] +
//	                    m.m[0][2] * m.m[1][0] * m.m[2][1] * m.m[3][3] +
//	                    m.m[0][1] * m.m[1][0] * m.m[2][3] * m.m[3][2] +
//	                    m.m[0][1] * m.m[1][2] * m.m[2][0] * m.m[3][3] +
//	                    m.m[0][2] * m.m[1][3] * m.m[2][0] * m.m[3][1] +
//	                    m.m[0][3] * m.m[1][1] * m.m[2][0] * m.m[3][2] -
//	                    m.m[0][3] * m.m[1][2] * m.m[2][0] * m.m[3][1] -
//	                    m.m[0][2] * m.m[1][1] * m.m[2][0] * m.m[3][3] -
//	                    m.m[0][1] * m.m[1][3] * m.m[2][0] * m.m[3][2] -
//	                    m.m[0][1] * m.m[1][2] * m.m[2][3] * m.m[3][0] -
//	                    m.m[0][2] * m.m[1][3] * m.m[2][1] * m.m[3][0] -
//	                    m.m[0][3] * m.m[1][1] * m.m[2][2] * m.m[3][0] +
//	                    m.m[0][3] * m.m[1][2] * m.m[2][1] * m.m[3][0] +
//	                    m.m[0][2] * m.m[1][1] * m.m[2][3] * m.m[3][0] +
//	                    m.m[0][1] * m.m[1][3] * m.m[2][2] * m.m[3][0];
//	assert(determinant != 0.0f);
//	float determinantRecp = 1.0f / determinant;
//
//	result.m[0][0] = (m.m[1][1] * m.m[2][2] * m.m[3][3] + m.m[1][2] * m.m[2][3] * m.m[3][1] +
//	                  m.m[1][3] * m.m[2][1] * m.m[3][2] - m.m[1][3] * m.m[2][2] * m.m[3][1] -
//	                  m.m[1][2] * m.m[2][1] * m.m[3][3] - m.m[1][1] * m.m[2][3] * m.m[3][2]) *
//	                 determinantRecp;
//	result.m[0][1] = (-m.m[0][1] * m.m[2][2] * m.m[3][3] - m.m[0][2] * m.m[2][3] * m.m[3][1] -
//	                  m.m[0][3] * m.m[2][1] * m.m[3][2] + m.m[0][3] * m.m[2][2] * m.m[3][1] +
//	                  m.m[0][2] * m.m[2][1] * m.m[3][3] + m.m[0][1] * m.m[2][3] * m.m[3][2]) *
//	                 determinantRecp;
//	result.m[0][2] = (m.m[0][1] * m.m[1][2] * m.m[3][3] + m.m[0][2] * m.m[1][3] * m.m[3][1] +
//	                  m.m[0][3] * m.m[1][1] * m.m[3][2] - m.m[0][3] * m.m[1][2] * m.m[3][1] -
//	                  m.m[0][2] * m.m[1][1] * m.m[3][3] - m.m[0][1] * m.m[1][3] * m.m[3][2]) *
//	                 determinantRecp;
//	result.m[0][3] = (-m.m[0][1] * m.m[1][2] * m.m[2][3] - m.m[0][2] * m.m[1][3] * m.m[2][1] -
//	                  m.m[0][3] * m.m[1][1] * m.m[2][2] + m.m[0][3] * m.m[1][2] * m.m[2][1] +
//	                  m.m[0][2] * m.m[1][1] * m.m[2][3] + m.m[0][1] * m.m[1][3] * m.m[2][2]) *
//	                 determinantRecp;
//	result.m[1][0] = (-m.m[1][0] * m.m[2][2] * m.m[3][3] - m.m[1][2] * m.m[2][3] * m.m[3][0] -
//	                  m.m[1][3] * m.m[2][0] * m.m[3][2] + m.m[1][3] * m.m[2][2] * m.m[3][0] +
//	                  m.m[1][2] * m.m[2][0] * m.m[3][3] + m.m[1][0] * m.m[2][3] * m.m[3][2]) *
//	                 determinantRecp;
//	result.m[1][1] = (m.m[0][0] * m.m[2][2] * m.m[3][3] + m.m[0][2] * m.m[2][3] * m.m[3][0] +
//	                  m.m[0][3] * m.m[2][0] * m.m[3][2] - m.m[0][3] * m.m[2][2] * m.m[3][0] -
//	                  m.m[0][2] * m.m[2][0] * m.m[3][3] - m.m[0][0] * m.m[2][3] * m.m[3][2]) *
//	                 determinantRecp;
//	result.m[1][2] = (-m.m[0][0] * m.m[1][2] * m.m[3][3] - m.m[0][2] * m.m[1][3] * m.m[3][0] -
//	                  m.m[0][3] * m.m[1][0] * m.m[3][2] + m.m[0][3] * m.m[1][2] * m.m[3][0] +
//	                  m.m[0][2] * m.m[1][0] * m.m[3][3] + m.m[0][0] * m.m[1][3] * m.m[3][2]) *
//	                 determinantRecp;
//
//	result.m[1][3] = (m.m[0][0] * m.m[1][2] * m.m[2][3] + m.m[0][2] * m.m[1][3] * m.m[2][0] +
//	                  m.m[0][3] * m.m[1][0] * m.m[2][2] - m.m[0][3] * m.m[1][2] * m.m[2][0] -
//	                  m.m[0][2] * m.m[1][0] * m.m[2][3] - m.m[0][0] * m.m[1][3] * m.m[2][2]) *
//	                 determinantRecp;
//
//	result.m[2][0] = (m.m[1][0] * m.m[2][1] * m.m[3][3] + m.m[1][1] * m.m[2][3] * m.m[3][0] +
//	                  m.m[1][3] * m.m[2][0] * m.m[3][1] - m.m[1][3] * m.m[2][1] * m.m[3][0] -
//	                  m.m[1][1] * m.m[2][0] * m.m[3][3] - m.m[0][0] * m.m[2][3] * m.m[3][1]) *
//	                 determinantRecp;
//	result.m[2][1] = (-m.m[0][0] * m.m[2][1] * m.m[3][3] - m.m[0][1] * m.m[2][3] * m.m[3][0] -
//	                  m.m[0][3] * m.m[2][0] * m.m[3][1] + m.m[0][3] * m.m[2][1] * m.m[3][0] +
//	                  m.m[0][1] * m.m[2][0] * m.m[3][3] + m.m[0][0] * m.m[2][3] * m.m[3][1]) *
//	                 determinantRecp;
//	result.m[2][2] = (m.m[0][0] * m.m[1][1] * m.m[3][3] + m.m[0][1] * m.m[1][3] * m.m[3][0] +
//	                  m.m[0][3] * m.m[1][0] * m.m[3][1] - m.m[0][3] * m.m[1][1] * m.m[3][0] -
//	                  m.m[0][1] * m.m[1][0] * m.m[3][3] - m.m[0][0] * m.m[1][3] * m.m[3][1]) *
//	                 determinantRecp;
//	result.m[2][3] = (-m.m[0][0] * m.m[1][1] * m.m[2][3] - m.m[0][1] * m.m[1][3] * m.m[2][0] -
//	                  m.m[0][3] * m.m[1][0] * m.m[2][1] + m.m[0][3] * m.m[1][1] * m.m[2][0] +
//	                  m.m[0][1] * m.m[1][0] * m.m[2][3] + m.m[0][0] * m.m[1][3] * m.m[2][1]) *
//	                 determinantRecp;
//	result.m[3][0] = (-m.m[1][0] * m.m[2][1] * m.m[3][2] - m.m[1][1] * m.m[2][2] * m.m[3][0] -
//	                  m.m[1][2] * m.m[2][0] * m.m[3][1] + m.m[1][2] * m.m[2][1] * m.m[3][0] +
//	                  m.m[1][1] * m.m[2][0] * m.m[3][2] + m.m[1][0] * m.m[2][2] * m.m[3][1]) *
//	                 determinantRecp;
//	result.m[3][1] = (m.m[0][0] * m.m[2][1] * m.m[3][2] + m.m[0][1] * m.m[2][2] * m.m[3][0] +
//	                  m.m[0][2] * m.m[2][0] * m.m[3][1] - m.m[0][2] * m.m[2][1] * m.m[3][0] -
//	                  m.m[0][1] * m.m[2][0] * m.m[3][2] - m.m[0][0] * m.m[2][2] * m.m[3][1]) *
//	                 determinantRecp;
//	result.m[3][2] = (-m.m[0][0] * m.m[1][1] * m.m[3][2] - m.m[0][1] * m.m[1][2] * m.m[3][0] -
//	                  m.m[0][2] * m.m[1][0] * m.m[3][1] + m.m[0][2] * m.m[1][1] * m.m[3][0] +
//	                  m.m[0][1] * m.m[1][0] * m.m[3][2] + m.m[0][0] * m.m[1][2] * m.m[3][1]) *
//	                 determinantRecp;
//	result.m[3][3] = (m.m[0][0] * m.m[1][1] * m.m[2][2] + m.m[0][1] * m.m[1][2] * m.m[2][0] +
//	                  m.m[0][2] * m.m[1][0] * m.m[2][1] - m.m[0][2] * m.m[1][1] * m.m[2][0] -
//	                  m.m[0][1] * m.m[1][0] * m.m[2][2] - m.m[0][0] * m.m[1][2] * m.m[2][1]) *
//	                 determinantRecp;
//	return result;
//};

class Cam {
public:
	void Initialize();
	void Update();
	WorldTransform& GetWorldTransform() { return worldTransform_; }
	ViewProjection& GetViewProjection() { return viewProjection_; }

private:
	WorldTransform worldTransform_;
	ViewProjection viewProjection_;

};
